{% extends "base.html.twig" %}

{% block title %}Reports{% endblock %}

{% block body %}
    <article class="art-row">
        <div class="div-col-1">
            <h2>Reports</h2>
            <ul class="about-links">
                <li><a href="#kmom01">Kmom 01</a></li>
                <li><a href="#kmom02">Kmom 02</a></li>
                <li><a href="#kmom03">Kmom 03</a></li>
            </ul>
        </div>

        <div class="div-col-2">
            <h2 id="kmom01">Kmom 01</h2>
            <p><b>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</b></p>
            <p>Jag har ju gått några tidigare kurser som behandlat objektorientering, den som jag spontant tänker på är oopython-kursen och även om det var ett tag 
            sedan så minns jag ändå grunderna kring ett objektorienterat förhållningssätt till kod.</p>
            <p><b>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</b></p>
            <p>Klasser och objekt i php fungerar lite som inkapslade segment utav kod som är knutna till klassen eller objektet dessa kan vi sedan välja själva hur vi manipulerar dem 
            eller vilken åtkomst som skall ges till de specifika delarna för en användare eller för all del en kollega. De grunder jag tänker är viktiga att förstå för att komma igång 
            med klasser och object är kanske framför allt just att förstå att attribut och metoder är kopplade till klassen/objektet och att vi beroende på hur vi skriver klassen också 
            kan bestämma hur dessa ska vara möjliga att komma åt eller ändra. En annan viktig, användbar och intressant aspekt av det hela är arv, det går nämligen att ärva attribut och 
            metoder från en klass. Det är något som kan vara mycket användbart om än lite svårare att få en övergriplig koll på.</p>
            <p><b>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</b></p>
            <p>Jag tror jag känner samma saker nu som när jag arbetade med en tidigare version av kursen som då hette oophp. Det är väldigt trevligt att använda en struktur som denna 
            i skapandet av en me-page då det här mer modullära förhållningssättet gör det enklare att dela upp och hålla koll på vad respektive modul eller del gör och ska göra. 
            Det som komplicerar det blir då snarare själva pusslandet med modulerna och att skapa sig en översikt kring vart saker skall vara och vart de passar in och hur själva kopplingarna 
            görs.</p>
            <p><b>PHP The Right Way, vilka delar in den finner du extra intressanta och värdefulla?</b></p>
            <p>Jag fastnade framför allt för kapitel 7 och mer specifikt delen kring S.O.L.I.D. det känns som ett bra tänk att ha för att kunna återanvända kod på ett bra och 
            smidigt sätt. Framför allt fastnade jag på O'et som står för Open/Closed Principle, alltså att klasser med mera skall vara designade på ett sådant sätt att de kan byggas på 
            men att det som redan är en del av dem inte ska modifieras. Jag tänker instinktivt att det kan bespara en mycket huvudbry om man kan hålla sig till den principen, framför allt 
            när kodbasen växer i storlek. Jag kan tänka mig ett scenario där mycket kod förlitar sig på en klassmetod eller liknande och den ändras (vilket vore emot principen) vilket leder 
            till att massa andra delar utav koden slutar fungera. Det scenariot låter som en källa till mycket, mycket arbete. Sen gäller det att lyckas hålla sig till dessa principer också 
            men det tänker jag kommer genom övning, arbete och att man gör sådana kostsamma misstag.</p>
            <p><b>TIL för detta kmom?</b></p>
            <p>Att det ibland är allt strul som man lär sig mest av. Jag hade mycket strul med php-versioner, npm-versioner, nodeJS-versioner etc i ubuntu men jag lärde mig genom det också 
            att man kan ha flera versioner av dessa saker samtidigt, hur man införskaffar dem samt hur man växlar mellan dom.</p>

            <h2 id="kmom02">Kmom 02</h2>
            <p><b>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</b></p>
            <p>Arv handlar om att klasser kan ärva funktionalitet utav varandra, just specifick i PHP från en förälder till ett barn och det går inte med multipelt arv. Ett exempel 
            skulle kunna vara en klass som representerar en bil, en bil har en ratt. Både en volvo och en batmobile är bilar så de kan ärva viss basfunktionalitet från bil-klassen för att 
            sedan utöka eller modifiera den.</p>
            <p>Komposition handlar om relationen mellan klasser. En relation där en klass inte kan existera utan en annan är en så kallad komposition</p>
            <p>Ett interface är som ett kontrakt som en klass kan lova att uppfylla genom att implementera det, all objekt som implementerar samma interface lovar alltså att 
            tillhandahålla de metoder som interfacet kräver.</p>
            <p>Trait skulle man kunna säga är som en klass som innehåller funktionalitet som flera andra klasser kan använda sig utav utan att behöva ärva</p>
            <p><b>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</b></p>
            <p>Uppgiften var rolig, känner mig fortfarande ringrostig sedan oophp men det är klart att gammal erfarenhet hjälper. Jag tycker dock att uppgiften var mer komplex än vad den var 
            i oophp och det tog mig därför en hel del tid, mycket lärorik tid. Jag är mestadels nöjd och tycker jag klarat uppgiften adekvat, jag stod tidigt vid ett vägskäl kring hur 
            jag ville representera mina kort och hur de utifrån detta även kan sorteras. Jag valde inte att ge varje kortobjekt någon id-variabel eller liknande för att underlätta sortering 
            utan det blev en mer tidskrävande lösning som jag ändå känner mig rätt nöjd med även om den säkert kan skrivas snyggare. Det finns garanterat förbättringar att göra, kanske bryta ut 
            funktionalitet i traits? Sen fick momentet mig att reflektera mycket kring vad som faktiskt är bra kod, hur "verbose" skall man vara när man skriver sin kod? Vart går gränsen där 
            koncis och effektiv kod blir svårläslig och inte längre är "snygg"?</p>
            <p><b>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</b></p>
            <p>Det känns rätt trevligt faktiskt, tycker det här momentet verkligen gav en övning att hitta mellan routes, hantera formulär och följa flödet i sin kod och mellan filerna. Däremot 
            kan det upplevas lite svårt att felsöka ibland när det blir lite diffust vad det är symfony klagar på och man får ta till lite fulingar med echo och print_r.</p>
            <p><b>Vilken är din TIL för detta kmom?</b></p>
            <p>Att det kan vara bökigt att sortera objekt när man väljer att sortera dom efter deras properties. Men det som kräver mycket möda känns så mycket bättre när man väl löser det.</p>

            <h2 id="kmom03">Kmom 03</h2>
            <p><b>kmom03</b></p>
            <p>kmom03</p>
        </div>
    </article>
{% endblock %}